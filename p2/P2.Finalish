"""
Created on Wed Feb 10 21:56:02 2016

@author: ajjenjoshi
"""

import numpy as np
import matplotlib.pyplot as plt

class NeuralNet:
    """
    This class implements a simple 3 layer neural network.
    """
    
    def __init__(self, hdim, input_dim, output_dim, epsilon):
        """
        Initializes the parameters of the neural network to random values
        """
        
        self.W1 = np.random.randn(input_dim, hdim) / np.sqrt(input_dim)
        self.b1 = np.zeros((1, hdim))
        self.W2 = np.random.randn(hdim, output_dim)/ np.sqrt(hdim)
        self.b2 = np.zeros((1, output_dim))
        self.epsilon = epsilon
        
    #--------------------------------------------------------------------------
    
    def compute_cost(self,X, y):
        """
        Computes the total loss on the dataset
        """
        num_samples = len(X)
        
        z1 = X.dot(self.W1) + self.b1
        a = np.tanh(z1)
        z2 = a.dot(self.W2) + self.b2
        exp_z = np.exp(z2)
        probs = exp_z / np.sum(exp_z, axis=1, keepdims=True)
        # Calculating the loss
        cross_ent_err = -np.log(probs[range(num_samples), y])
        data_loss = np.sum(cross_ent_err)
        # Add regulatization term to loss (optional)
        data_loss += rate/2 * (np.sum(np.square(self.W1)) + np.sum(np.square(self.W2)))
        return 1./num_samples * data_loss
        '''
        num_samples = len(X)
        # Do Forward propagation to calculate our predictions
        z = X.dot(self.W) + self.b
        exp_z = np.exp(z)
        softmax_scores = exp_z / np.sum(exp_z, axis=1, keepdims=True)
        # Calculate the cross-entropy loss
        cross_ent_err = -np.log(softmax_scores[range(num_samples), y])
        data_loss = np.sum(cross_ent_err)
        return 1./num_samples * data_loss
        '''
    
    #--------------------------------------------------------------------------
 
    def predict(self,x):
        """
        Makes a prediction based on current model parameters
            """
            
        z1 = x.dot(self.W1) + self.b1
        a = np.tanh(z1)
        z2 = a.dot(self.W2) + self.b2
        exp_z = np.exp(z2)
        softmax_scores = exp_z / np.sum(exp_z, axis=1, keepdims=True)
        return np.argmax(softmax_scores, axis=1)        
        
        '''
        # Do Forward Propagation
        z = x.dot(self.W) + self.b
        exp_z = np.exp(z)
        softmax_scores = exp_z / np.sum(exp_z, axis=1, keepdims=True)
        return np.argmax(softmax_scores, axis=1)'''
        
    #--------------------------------------------------------------------------
        
    def fit(self,h,X,y,num_epochs):
        """
        Learns model parameters to fit the data
        hdim = number of nodes in the hidden layer
        """

        for i in range(0, num_epochs):
            #For each epoch
            num_samples = len(X)
            rate = 0.01
            
            #   Do Forward Propagation   
            z1 = X.dot(self.W1) + self.b1
            a = np.tanh(z1)
            z2 = a.dot(self.W2) + self.b2
            exp_z = np.exp(z2)
            softmax_scores = exp_z / np.sum(exp_z, axis=1, keepdims=True)
            
            #   Do Back Propagation
            delta = softmax_scores
            delta[range(num_samples), y] -= 1
            deltaW2 = (a.T).dot(delta)
            deltab2 = np.sum(delta, axis=0, keepdims=True)
            delta2 = delta.dot(self.W2.T)*(1-np.power(a,2))
            deltaW1 = np.dot(X.T, delta2)
            deltab1 = np.sum(delta2, axis=0)
            
            #   Update model parameters using gradients  
            deltaW2 += rate *self.W2
            deltaW1 += rate *self.W1
            
            #gradient descent 
            self.W1 += -epsilon* deltaW1
            self.b1 += -epsilon* deltab1
            self.W2 += -epsilon* deltaW2
            self.b2 += -epsilon* deltab2
            
            


#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

def plot_decision_boundary(pred_func):
    """
    Helper function to print the decision boundary given by model
    """
    # Set min and max values
    x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5
    y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5
    h = 0.01
    # Generate a grid of points
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    # Predict the function value for the whole gid
    Z = pred_func(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    # Plot the contour and training examples
    plt.contourf(xx, yy, Z, cmap=plt.cm.Spectral)
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Spectral)
    plt.show()

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

#Train Neural Network on
linear = False

#A. linearly separable data
if linear:
    #load data
    X = np.genfromtxt('Z:/440/Lab4_Soln/Lab4_Soln/DATA/ToyLinearX.csv', delimiter=',')
    y = np.genfromtxt('Z:/440/Lab4_Soln/Lab4_Soln/DATA/ToyLineary.csv', delimiter=',')
    y = y.astype(int)
    #plot data
    plt.scatter(X[:,0], X[:,1], s=40, c=y, cmap=plt.cm.Spectral)
    plt.show()
#B. Non-linearly separable data
else:
    #load data
    X = np.genfromtxt('Z:/440/Lab4_Soln/Lab4_Soln/DATA/ToyMoonX.csv', delimiter=',')
    y = np.genfromtxt('Z:/440/Lab4_Soln/Lab4_Soln/DATA/ToyMoony.csv', delimiter=',')
    y = y.astype(int)
    #plot data
    plt.scatter(X[:,0], X[:,1], s=40, c=y, cmap=plt.cm.Spectral)
    plt.show()

input_dim = 2 # input layer dimensionality
output_dim = 2 # output layer dimensionality

# Gradient descent parameters 
epsilon = 0.01 
num_epochs = 5000

#added
rate = 0.01
hdim = 5

# Fit model
#----------------------------------------------
#Uncomment following lines after implementing NeuralNet
#----------------------------------------------
NN = NeuralNet(hdim, input_dim, output_dim, epsilon)
NN.fit(hdim,X,y,num_epochs)
#
# Plot the decision boundary
plot_decision_boundary(lambda x: NN.predict(x))
plt.title("Neural Net Decision Boundary")
